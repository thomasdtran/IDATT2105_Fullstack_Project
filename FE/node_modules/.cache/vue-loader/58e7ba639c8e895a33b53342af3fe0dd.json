{"remainingRequest":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue?vue&type=template&id=22268af8&scoped=true","dependencies":[{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue","mtime":1621617515716},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IGlkPSJjb250YWluZXIiPgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImRhdGFVSSI+CgogICAgICAgICAgICA8aDM+QW50YWxsIHRpbWVyIGh2ZXJ0IHJvbSBlciBibGl0dCByZXNlcnZlcnQ6PC9oMz4KICAgICAgICAgICAgPGRpdiBpZD0iY2hhcnQiPjwvZGl2PgoKICAgICAgICAgICAgPGI+VGlkc3JhbW1lOjwvYj4gPHNlbGVjdCBpZD0idGltZVNlbGVjdCIgcmVmPSJ0aW1lU2VsZWN0IiBAY2hhbmdlPSJnZXRBbGxSb29tcyI+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwIj5TaXN0ZSB1a2U8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjEiPlNpc3RlIG3DpW5lZDwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMiI+RGV0dGUgc2VtZXN0ZXJldDwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPHNwaW5uZXIgdi1zaG93PSJpc0dldHRpbmdBbGxSb29tcyIgLz4KCiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0YVVJIj4KICAgICAgICAgICAgPGgzPlJlc2VydmFzam9uZXIgaSBzZWtzam9uZXIgdGlsIGV0IHJvbTo8L2gzPgogICAgICAgICAgICA8ZGl2IGlkPSJjaGFydDIiPjwvZGl2PgogICAgICAgICAgICA8Yj5Sb206PC9iPiA8c2VsZWN0IGlkPSAicm9vbVNlbGVjdCIgcmVmPSJyb29tU2VsZWN0IiBAY2hhbmdlPSJjaGFuZ2VSb29tIj4KICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgICB2LWZvcj0icm9vbSBpbiByb29tTmFtZUFycmF5IgogICAgICAgICAgICAgICAgICAgIHYtYmluZDprZXk9InJvb20iCiAgICAgICAgICAgICAgICAgICAgdi1iaW5kOnZhbHVlPSJyb29tIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIHt7cm9vbX19CiAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDxzcGlubmVyIHYtc2hvdz0iaXNHZXR0aW5nQWxsU2VjdGlvbnMiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4K"},{"version":3,"sources":["/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEf,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAEf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAErB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,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","file":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue","sourceRoot":"","sourcesContent":["<template>\n    <div id=\"container\">\n        \n        <div class=\"dataUI\">\n\n            <h3>Antall timer hvert rom er blitt reservert:</h3>\n            <div id=\"chart\"></div>\n\n            <b>Tidsramme:</b> <select id=\"timeSelect\" ref=\"timeSelect\" @change=\"getAllRooms\">\n                <option value=\"0\">Siste uke</option>\n                <option value=\"1\">Siste måned</option>\n                <option value=\"2\">Dette semesteret</option>\n            </select>\n            <spinner v-show=\"isGettingAllRooms\" />\n\n        </div>\n        \n        <div class=\"dataUI\">\n            <h3>Reservasjoner i seksjoner til et rom:</h3>\n            <div id=\"chart2\"></div>\n            <b>Rom:</b> <select id= \"roomSelect\" ref=\"roomSelect\" @change=\"changeRoom\">\n                <option\n                    v-for=\"room in roomNameArray\"\n                    v-bind:key=\"room\"\n                    v-bind:value=\"room\"\n                >\n                    {{room}}\n                </option>\n            </select>\n            <spinner v-show=\"isGettingAllSections\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport Spinner from \"@/components/Spinner.vue\"\nimport createHttp from \"@/services/http\";\nimport { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport moment from 'moment';\n\nexport default {\n    components: {\n        Spinner\n    },\n    data(){\n        return {\n            http: createHttp(),\n            chart: null,\n            chart2: null,\n            allRooms: {},\n            roomNameArray: [],\n            isGettingAllRooms: false,\n            isGettingAllSections: false,\n        }\n    },\n    methods: {\n        /**\n         * Metode for å velge hvilket rom man vil ha statistikk for.\n         * Tegner et søylediagram som viser hvor mange ganger hver seksjon har blitt reservert.\n         * Dersom en seksjon ikke har blitt reservert vises den ikke.\n         * Henter kun data fra reservasjoner som har skjedd.\n         */\n        async changeRoom(){\n            this.isGettingAllSections = true;\n\n            let selectedRoom = this.$refs.roomSelect.value;\n            let room = this.allRooms.find(r => r.name === selectedRoom);\n            \n            let sectionKeys;\n            let sectionValues = [];\n\n            await this.http.get(process.env.VUE_APP_API_URL + \"/api/v1/stats/alltime/\"+room.id)\n            .then(res=>{\n                for(let v in res.data) sectionValues.push(res.data[v]);\n                sectionKeys = Object.keys(res.data);\n            });\n            \n            let sectionNames = [];\n            for (let i = 0; i < sectionKeys.length; i++) {\n                sectionNames.push(room.sections.find(s => s.id === parseInt(sectionKeys[i])).name);\n            }\n            \n            this.chart2 = new Chart(\"#chart2\", {\n                data: {\n                    labels: sectionNames,\n                    datasets: [\n                        {\n                            name: '',\n                            chartType: 'bar',\n                            values: sectionValues\n                        }\n                    ]\n                },\n                title: \"Antall ganger seksjon er reservert\",\n                type: \"bar\",\n                height: 500,\n                colors: ['#0055b7'],\n                axisOptions: {\n                    xAxisMode: \"tick\",\n                    xIsSeries: true\n                },\n                barOptions: {\n                    stacked: false,\n                    spaceRatio: 0.2\n                },\n                tooltipOptions: {\n                    formatTooltipX: (d) => (d + \"\").toUpperCase(),\n                    formatTooltipY: (d) => (d + \" reservasjoner\"),\n                }\n            });\n            this.isGettingAllSections = false\n        },\n        /**\n         * Metode for å finne statistikk på hvor mange timer hvert rom har vært i bruk/reservert.\n         * Tegner et søylediagram som viser total antall tid på hvert rom oppgitt i timer.\n         * Henter kun data fra reservasjoner som har skjedd.\n         */\n        async getAllRooms(){\n            this.isGettingAllRooms = true;\n\n            let time = parseInt(this.$refs.timeSelect.value);\n            let numweeks;\n\n            if(time === 0) numweeks = 1;\n            else if(time === 1) numweeks = 4;\n            else numweeks = this.findSemesterWeeks;\n\n            let rnames = [];\n            let rvalues = [];\n\n            for await (let e of this.allRooms) {\n                await this.http.get(process.env.VUE_APP_API_URL + \"/api/v1/stats/\"+e.id+\"/\"+numweeks)\n                .then(res =>{ \n                    if(JSON.stringify(res.data) !== JSON.stringify({})){\n                        rnames.push(Object.keys(res.data));\n                        rvalues.push(res.data[Object.keys(res.data)[0]] / 60);\n                    }\n                });\n            }\n\n            this.chart = new Chart(\"#chart\", {\n                data: {\n                    labels: rnames,\n                    datasets: [\n                        {\n                            name: '',\n                            chartType: 'bar',\n                            values: rvalues\n                        }\n                    ]\n                },\n                title: \"Reservert tid\",\n                type: \"bar\",\n                height: 500,\n                colors: ['#0055b7'],\n                axisOptions: {\n                    xAxisMode: \"tick\",\n                    xIsSeries: true\n                },\n                barOptions: {\n                    stacked: false,\n                    spaceRatio: 0.2\n                },\n                tooltipOptions: {\n                    formatTooltipX: (d) => (d + \"\").toUpperCase(),\n                    formatTooltipY: (d) => (d + \" timer reservert totalt\"),\n                }\n            });\n            this.isGettingAllRooms = false;\n        },\n    },\n    computed: {\n        /**\n         * Metode for å finne ut av hvor mange uker siden semesterstart.\n         * Bruker datoer hentet fra ntnu sine nettsider:\n         * vårsemesteret starter 11.januar, høstsemesteret (immatrikulering) starter 16. august i\n         */\n        findSemesterWeeks:function(){\n            let today = moment();\n            let thisyear = today.year();\n            let springSemesterStart = moment([thisyear, 0, 11])\n            let fallSemesterStart = moment([thisyear, 7, 16])\n\n            if(today.diff(fallSemesterStart) < 0){ //vårsemester, inkluderer sommerferien\n                return today.diff(springSemesterStart, 'weeks')\n            }\n            else { //høstsemester\n                return today.diff(fallSemesterStart, 'weeks');\n            }\n        }\n    },\n    /**\n     * Henter data om alle rom til bruk senere,\n     * kaller også på metoder for å tegne søylediagrammene\n     */\n    async mounted() {\n        await this.http.get(process.env.VUE_APP_API_URL + \"/api/v1/rooms\")\n        .then(res => {\n            res.data.forEach(element => {\n                this.roomNameArray.push(element.name);\n            });\n            this.allRooms  = res.data\n        })\n        this.getAllRooms();\n        this.changeRoom();\n    }\n}\n</script>\n\n<style scoped>\n\n*{\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\n#container{\n    min-height: 62vh;\n}\n\nh3{\n    margin-bottom: 2rem;\n}\n\n.dataUI {\n    width: 62%;\n    margin: auto;\n    margin-bottom: 5rem;\n}\n\n#dataUI b{\n    padding-left: 1rem;\n}\n\nselect {\n    padding: 7px;\n    margin: 10px;\n}\n\n#chart, #chart2{\n    background-color: #f2f2f2;\n    border-radius: 5px;\n    padding: 3rem;\n}\n\n</style>\n"]}]}