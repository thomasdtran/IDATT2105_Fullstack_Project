{"remainingRequest":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/babel-loader/lib/index.js!/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue?vue&type=template&id=22268af8&scoped=true","dependencies":[{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue","mtime":1621617515716},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB2U2hvdyBhcyBfdlNob3csIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIHdpdGhTY29wZUlkIGFzIF93aXRoU2NvcGVJZCwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LTIyMjY4YWY4Iik7CgpfcHVzaFNjb3BlSWQoImRhdGEtdi0yMjI2OGFmOCIpOwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAgaWQ6ICJjb250YWluZXIiCn07CnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAiZGF0YVVJIgp9OwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoMyIsIG51bGwsICJBbnRhbGwgdGltZXIgaHZlcnQgcm9tIGVyIGJsaXR0IHJlc2VydmVydDoiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImRpdiIsIHsKICBpZDogImNoYXJ0Igp9LCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImIiLCBudWxsLCAiVGlkc3JhbW1lOiIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF82ID0gLyojX19QVVJFX18qL19jcmVhdGVUZXh0Vk5vZGUoKTsKCnZhciBfaG9pc3RlZF83ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgib3B0aW9uIiwgewogIHZhbHVlOiAiMCIKfSwgIlNpc3RlIHVrZSIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF84ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgib3B0aW9uIiwgewogIHZhbHVlOiAiMSIKfSwgIlNpc3RlIG3DpW5lZCIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgib3B0aW9uIiwgewogIHZhbHVlOiAiMiIKfSwgIkRldHRlIHNlbWVzdGVyZXQiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMTAgPSB7CiAgY2xhc3M6ICJkYXRhVUkiCn07Cgp2YXIgX2hvaXN0ZWRfMTEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoMyIsIG51bGwsICJSZXNlcnZhc2pvbmVyIGkgc2Vrc2pvbmVyIHRpbCBldCByb206IiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzEyID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiZGl2IiwgewogIGlkOiAiY2hhcnQyIgp9LCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMTMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJiIiwgbnVsbCwgIlJvbToiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMTQgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgpOwoKX3BvcFNjb3BlSWQoKTsKCmV4cG9ydCB2YXIgcmVuZGVyID0gLyojX19QVVJFX18qL193aXRoSWQoZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X3NwaW5uZXIgPSBfcmVzb2x2ZUNvbXBvbmVudCgic3Bpbm5lciIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsIFtfaG9pc3RlZF8zLCBfaG9pc3RlZF80LCBfaG9pc3RlZF81LCBfaG9pc3RlZF82LCBfY3JlYXRlVk5vZGUoInNlbGVjdCIsIHsKICAgIGlkOiAidGltZVNlbGVjdCIsCiAgICByZWY6ICJ0aW1lU2VsZWN0IiwKICAgIG9uQ2hhbmdlOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLmdldEFsbFJvb21zICYmICRvcHRpb25zLmdldEFsbFJvb21zLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCBbX2hvaXN0ZWRfNywgX2hvaXN0ZWRfOCwgX2hvaXN0ZWRfOV0sIDU0NAogIC8qIEhZRFJBVEVfRVZFTlRTLCBORUVEX1BBVENIICovCiAgKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShfY29tcG9uZW50X3NwaW5uZXIsIG51bGwsIG51bGwsIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApLCBbW192U2hvdywgJGRhdGEuaXNHZXR0aW5nQWxsUm9vbXNdXSldKSwgX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xMCwgW19ob2lzdGVkXzExLCBfaG9pc3RlZF8xMiwgX2hvaXN0ZWRfMTMsIF9ob2lzdGVkXzE0LCBfY3JlYXRlVk5vZGUoInNlbGVjdCIsIHsKICAgIGlkOiAicm9vbVNlbGVjdCIsCiAgICByZWY6ICJyb29tU2VsZWN0IiwKICAgIG9uQ2hhbmdlOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLmNoYW5nZVJvb20gJiYgJG9wdGlvbnMuY2hhbmdlUm9vbS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgWyhfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkZGF0YS5yb29tTmFtZUFycmF5LCBmdW5jdGlvbiAocm9vbSkgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJvcHRpb24iLCB7CiAgICAgIGtleTogcm9vbSwKICAgICAgdmFsdWU6IHJvb20KICAgIH0sIF90b0Rpc3BsYXlTdHJpbmcocm9vbSksIDkKICAgIC8qIFRFWFQsIFBST1BTICovCiAgICAsIFsidmFsdWUiXSk7CiAgfSksIDEyOAogIC8qIEtFWUVEX0ZSQUdNRU5UICovCiAgKSldLCA1NDQKICAvKiBIWURSQVRFX0VWRU5UUywgTkVFRF9QQVRDSCAqLwogICksIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9zcGlubmVyLCBudWxsLCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKSwgW1tfdlNob3csICRkYXRhLmlzR2V0dGluZ0FsbFNlY3Rpb25zXV0pXSldKTsKfSk7"},{"version":3,"sources":["/Users/thomastran/Documents/FS_Project/idatt2105-project-FE/fs_frontend/src/components/RoomStats.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"container\">\n        \n        <div class=\"dataUI\">\n\n            <h3>Antall timer hvert rom er blitt reservert:</h3>\n            <div id=\"chart\"></div>\n\n            <b>Tidsramme:</b> <select id=\"timeSelect\" ref=\"timeSelect\" @change=\"getAllRooms\">\n                <option value=\"0\">Siste uke</option>\n                <option value=\"1\">Siste måned</option>\n                <option value=\"2\">Dette semesteret</option>\n            </select>\n            <spinner v-show=\"isGettingAllRooms\" />\n\n        </div>\n        \n        <div class=\"dataUI\">\n            <h3>Reservasjoner i seksjoner til et rom:</h3>\n            <div id=\"chart2\"></div>\n            <b>Rom:</b> <select id= \"roomSelect\" ref=\"roomSelect\" @change=\"changeRoom\">\n                <option\n                    v-for=\"room in roomNameArray\"\n                    v-bind:key=\"room\"\n                    v-bind:value=\"room\"\n                >\n                    {{room}}\n                </option>\n            </select>\n            <spinner v-show=\"isGettingAllSections\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport Spinner from \"@/components/Spinner.vue\"\nimport createHttp from \"@/services/http\";\nimport { Chart } from \"frappe-charts/dist/frappe-charts.esm.js\";\nimport \"frappe-charts/dist/frappe-charts.min.css\";\nimport moment from 'moment';\n\nexport default {\n    components: {\n        Spinner\n    },\n    data(){\n        return {\n            http: createHttp(),\n            chart: null,\n            chart2: null,\n            allRooms: {},\n            roomNameArray: [],\n            isGettingAllRooms: false,\n            isGettingAllSections: false,\n        }\n    },\n    methods: {\n        /**\n         * Metode for å velge hvilket rom man vil ha statistikk for.\n         * Tegner et søylediagram som viser hvor mange ganger hver seksjon har blitt reservert.\n         * Dersom en seksjon ikke har blitt reservert vises den ikke.\n         * Henter kun data fra reservasjoner som har skjedd.\n         */\n        async changeRoom(){\n            this.isGettingAllSections = true;\n\n            let selectedRoom = this.$refs.roomSelect.value;\n            let room = this.allRooms.find(r => r.name === selectedRoom);\n            \n            let sectionKeys;\n            let sectionValues = [];\n\n            await this.http.get(process.env.VUE_APP_API_URL + \"/api/v1/stats/alltime/\"+room.id)\n            .then(res=>{\n                for(let v in res.data) sectionValues.push(res.data[v]);\n                sectionKeys = Object.keys(res.data);\n            });\n            \n            let sectionNames = [];\n            for (let i = 0; i < sectionKeys.length; i++) {\n                sectionNames.push(room.sections.find(s => s.id === parseInt(sectionKeys[i])).name);\n            }\n            \n            this.chart2 = new Chart(\"#chart2\", {\n                data: {\n                    labels: sectionNames,\n                    datasets: [\n                        {\n                            name: '',\n                            chartType: 'bar',\n                            values: sectionValues\n                        }\n                    ]\n                },\n                title: \"Antall ganger seksjon er reservert\",\n                type: \"bar\",\n                height: 500,\n                colors: ['#0055b7'],\n                axisOptions: {\n                    xAxisMode: \"tick\",\n                    xIsSeries: true\n                },\n                barOptions: {\n                    stacked: false,\n                    spaceRatio: 0.2\n                },\n                tooltipOptions: {\n                    formatTooltipX: (d) => (d + \"\").toUpperCase(),\n                    formatTooltipY: (d) => (d + \" reservasjoner\"),\n                }\n            });\n            this.isGettingAllSections = false\n        },\n        /**\n         * Metode for å finne statistikk på hvor mange timer hvert rom har vært i bruk/reservert.\n         * Tegner et søylediagram som viser total antall tid på hvert rom oppgitt i timer.\n         * Henter kun data fra reservasjoner som har skjedd.\n         */\n        async getAllRooms(){\n            this.isGettingAllRooms = true;\n\n            let time = parseInt(this.$refs.timeSelect.value);\n            let numweeks;\n\n            if(time === 0) numweeks = 1;\n            else if(time === 1) numweeks = 4;\n            else numweeks = this.findSemesterWeeks;\n\n            let rnames = [];\n            let rvalues = [];\n\n            for await (let e of this.allRooms) {\n                await this.http.get(process.env.VUE_APP_API_URL + \"/api/v1/stats/\"+e.id+\"/\"+numweeks)\n                .then(res =>{ \n                    if(JSON.stringify(res.data) !== JSON.stringify({})){\n                        rnames.push(Object.keys(res.data));\n                        rvalues.push(res.data[Object.keys(res.data)[0]] / 60);\n                    }\n                });\n            }\n\n            this.chart = new Chart(\"#chart\", {\n                data: {\n                    labels: rnames,\n                    datasets: [\n                        {\n                            name: '',\n                            chartType: 'bar',\n                            values: rvalues\n                        }\n                    ]\n                },\n                title: \"Reservert tid\",\n                type: \"bar\",\n                height: 500,\n                colors: ['#0055b7'],\n                axisOptions: {\n                    xAxisMode: \"tick\",\n                    xIsSeries: true\n                },\n                barOptions: {\n                    stacked: false,\n                    spaceRatio: 0.2\n                },\n                tooltipOptions: {\n                    formatTooltipX: (d) => (d + \"\").toUpperCase(),\n                    formatTooltipY: (d) => (d + \" timer reservert totalt\"),\n                }\n            });\n            this.isGettingAllRooms = false;\n        },\n    },\n    computed: {\n        /**\n         * Metode for å finne ut av hvor mange uker siden semesterstart.\n         * Bruker datoer hentet fra ntnu sine nettsider:\n         * vårsemesteret starter 11.januar, høstsemesteret (immatrikulering) starter 16. august i\n         */\n        findSemesterWeeks:function(){\n            let today = moment();\n            let thisyear = today.year();\n            let springSemesterStart = moment([thisyear, 0, 11])\n            let fallSemesterStart = moment([thisyear, 7, 16])\n\n            if(today.diff(fallSemesterStart) < 0){ //vårsemester, inkluderer sommerferien\n                return today.diff(springSemesterStart, 'weeks')\n            }\n            else { //høstsemester\n                return today.diff(fallSemesterStart, 'weeks');\n            }\n        }\n    },\n    /**\n     * Henter data om alle rom til bruk senere,\n     * kaller også på metoder for å tegne søylediagrammene\n     */\n    async mounted() {\n        await this.http.get(process.env.VUE_APP_API_URL + \"/api/v1/rooms\")\n        .then(res => {\n            res.data.forEach(element => {\n                this.roomNameArray.push(element.name);\n            });\n            this.allRooms  = res.data\n        })\n        this.getAllRooms();\n        this.changeRoom();\n    }\n}\n</script>\n\n<style scoped>\n\n*{\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\n#container{\n    min-height: 62vh;\n}\n\nh3{\n    margin-bottom: 2rem;\n}\n\n.dataUI {\n    width: 62%;\n    margin: auto;\n    margin-bottom: 5rem;\n}\n\n#dataUI b{\n    padding-left: 1rem;\n}\n\nselect {\n    padding: 7px;\n    margin: 10px;\n}\n\n#chart, #chart2{\n    background-color: #f2f2f2;\n    border-radius: 5px;\n    padding: 3rem;\n}\n\n</style>\n"],"sourceRoot":""}]}